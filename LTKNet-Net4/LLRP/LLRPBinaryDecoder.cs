
    /*
    ***************************************************************************
    *  Copyright 2008 Impinj, Inc.
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    *
    ***************************************************************************
    */


    /*
    ***************************************************************************
    *
    *  This code is generated by Impinj LLRP .Net generator. Modification is not
    *  recommended.
    *
    ***************************************************************************
    */

    /*
    ***************************************************************************
    * File Name:       LLRPBinaryDecoder.cs
    *
    * Version:         1.0
    * Author:          Impinj
    * Organization:    Impinj
    * Date:            Jan. 18, 2008
    *
    * Description:     This file contains general XML Decoder for LLRP messages
    ***************************************************************************
    */

    using System;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.ComponentModel;
    using System.Runtime.InteropServices;

    using Org.LLRP.LTK.LLRPV1;
    using Org.LLRP.LTK.LLRPV1.DataType;
    
    using System.Net;

    namespace Org.LLRP.LTK.LLRPV1
    {

    /// <summary>
    /// LLRP Binary Decoder
    /// </summary>
    public class LLRPBinaryDecoder
    {

       public const int MIN_HDR = 10;

       public struct LLRP_Envelope
       {
          public byte ver;
          public ENUM_LLRP_MSG_TYPE msg_type;
          public UInt32 msg_len;
          public UInt32 msg_id;
       }

       public static void Decode_Envelope (byte [] hdr, out LLRP_Envelope env)
       {
       
          System.IO.MemoryStream mr = new MemoryStream (hdr, 0, MIN_HDR);
          System.IO.BinaryReader br = new BinaryReader (mr);

          /* decode minimal header */
          env = new LLRP_Envelope();
          UInt16 prefix = (UInt16) IPAddress.NetworkToHostOrder ((short) br.ReadUInt16());
          env.ver = (byte)(prefix >> 10);
          env.msg_type = (ENUM_LLRP_MSG_TYPE) (prefix & 1023);
          env.msg_len = (UInt32) IPAddress.NetworkToHostOrder((int) br.ReadUInt32());
          env.msg_id = (UInt32) IPAddress.NetworkToHostOrder((int) br.ReadUInt32());
       }
       
       /// <summary>
       /// Decode Binary LLRP packet to LLRP message object
       /// </summary>
       /// <param name="packet">Binary LLRP packet to be decoded</param>
       /// <param name="msg">LLRP message. output</param>
       public static void Decode(ref byte [] packet, out Message msg)
       {
          LLRP_Envelope env;
          Decode_Envelope (packet, out env);
          
          BitArray ba = Util.ConvertByteArrayToBitArray(packet);
          int cursor = 0;

          switch(env.msg_type)
          {
          
             case ENUM_LLRP_MSG_TYPE.CUSTOM_MESSAGE:
            
                msg = CustomMsgDecodeFactory.DecodeCustomMessage(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.GET_READER_CAPABILITIES:
            
                msg = MSG_GET_READER_CAPABILITIES.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.GET_READER_CAPABILITIES_RESPONSE:
            
                msg = MSG_GET_READER_CAPABILITIES_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.ADD_ROSPEC:
            
                msg = MSG_ADD_ROSPEC.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.ADD_ROSPEC_RESPONSE:
            
                msg = MSG_ADD_ROSPEC_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.DELETE_ROSPEC:
            
                msg = MSG_DELETE_ROSPEC.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.DELETE_ROSPEC_RESPONSE:
            
                msg = MSG_DELETE_ROSPEC_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.START_ROSPEC:
            
                msg = MSG_START_ROSPEC.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.START_ROSPEC_RESPONSE:
            
                msg = MSG_START_ROSPEC_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.STOP_ROSPEC:
            
                msg = MSG_STOP_ROSPEC.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.STOP_ROSPEC_RESPONSE:
            
                msg = MSG_STOP_ROSPEC_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.ENABLE_ROSPEC:
            
                msg = MSG_ENABLE_ROSPEC.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.ENABLE_ROSPEC_RESPONSE:
            
                msg = MSG_ENABLE_ROSPEC_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.DISABLE_ROSPEC:
            
                msg = MSG_DISABLE_ROSPEC.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.DISABLE_ROSPEC_RESPONSE:
            
                msg = MSG_DISABLE_ROSPEC_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.GET_ROSPECS:
            
                msg = MSG_GET_ROSPECS.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.GET_ROSPECS_RESPONSE:
            
                msg = MSG_GET_ROSPECS_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.ADD_ACCESSSPEC:
            
                msg = MSG_ADD_ACCESSSPEC.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.ADD_ACCESSSPEC_RESPONSE:
            
                msg = MSG_ADD_ACCESSSPEC_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.DELETE_ACCESSSPEC:
            
                msg = MSG_DELETE_ACCESSSPEC.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.DELETE_ACCESSSPEC_RESPONSE:
            
                msg = MSG_DELETE_ACCESSSPEC_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.ENABLE_ACCESSSPEC:
            
                msg = MSG_ENABLE_ACCESSSPEC.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.ENABLE_ACCESSSPEC_RESPONSE:
            
                msg = MSG_ENABLE_ACCESSSPEC_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.DISABLE_ACCESSSPEC:
            
                msg = MSG_DISABLE_ACCESSSPEC.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.DISABLE_ACCESSSPEC_RESPONSE:
            
                msg = MSG_DISABLE_ACCESSSPEC_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.GET_ACCESSSPECS:
            
                msg = MSG_GET_ACCESSSPECS.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.GET_ACCESSSPECS_RESPONSE:
            
                msg = MSG_GET_ACCESSSPECS_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.GET_READER_CONFIG:
            
                msg = MSG_GET_READER_CONFIG.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.GET_READER_CONFIG_RESPONSE:
            
                msg = MSG_GET_READER_CONFIG_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.SET_READER_CONFIG:
            
                msg = MSG_SET_READER_CONFIG.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.SET_READER_CONFIG_RESPONSE:
            
                msg = MSG_SET_READER_CONFIG_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.CLOSE_CONNECTION:
            
                msg = MSG_CLOSE_CONNECTION.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.CLOSE_CONNECTION_RESPONSE:
            
                msg = MSG_CLOSE_CONNECTION_RESPONSE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.GET_REPORT:
            
                msg = MSG_GET_REPORT.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.RO_ACCESS_REPORT:
            
                msg = MSG_RO_ACCESS_REPORT.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.KEEPALIVE:
            
                msg = MSG_KEEPALIVE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.KEEPALIVE_ACK:
            
                msg = MSG_KEEPALIVE_ACK.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.READER_EVENT_NOTIFICATION:
            
                msg = MSG_READER_EVENT_NOTIFICATION.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.ENABLE_EVENTS_AND_REPORTS:
            
                msg = MSG_ENABLE_EVENTS_AND_REPORTS.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             case ENUM_LLRP_MSG_TYPE.ERROR_MESSAGE:
            
                msg = MSG_ERROR_MESSAGE.FromBitArray(ref ba, ref cursor, (int)(env.msg_len * 8));
              
                return;
          
             default:
                throw new MalformedPacket ("Unrecognized message " + env.msg_type);
          }
       }
    }
    
    public class MalformedPacket : System.Exception
    {
        // The default constructor needs to be defined
        // explicitly now since it would be gone otherwise.

        public MalformedPacket()
        {
        }

        public MalformedPacket(string message)
            : base(message)
        {
        }

        public MalformedPacket(string message, Exception innerException)
            : base(message, innerException)
        {
        }

    }

    }
    
    
  